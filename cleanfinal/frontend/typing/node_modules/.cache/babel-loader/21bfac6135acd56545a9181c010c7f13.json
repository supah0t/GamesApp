{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nconst checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      localStorage.setItem('token', token);\n      dispatch(authSuccess(token));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Ody/Desktop/prog/cs50web/finalapp/cleanfinal/frontend/typing/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START\r\n  }\r\n}\r\n\r\nexport const authSuccess = token => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    token: token\r\n  }\r\n}\r\n\r\nexport const authFail = error => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error\r\n  }\r\n}\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('expirationDate');\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT\r\n  }\r\n}\r\n\r\nconst checkAuthTimeout = expirationTime => {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000)\r\n  }\r\n}\r\n\r\nexport const authLogin = (username, password) => {\r\n  return dispatch => {\r\n    dispatch(authStart());\r\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\r\n      username: username,\r\n      password: password\r\n    })\r\n    .then(res => {\r\n      const token = res.data.key;\r\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('expirationDate', expirationDate);\r\n      dispatch(authSuccess(token));\r\n      dispatch(checkAuthTimeout(3600));\r\n    })\r\n    .catch(err => {\r\n      dispatch(authFail(err));\r\n    })\r\n  }\r\n}\r\n\r\nexport const authSignup = (username, email, password1, password2) => {\r\n  return dispatch => {\r\n    dispatch(authStart());\r\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\r\n      username: username,\r\n      email: email,\r\n      password1: password1,\r\n      password2: password2\r\n    })\r\n      .then(res => {\r\n        const token = res.data.key;\r\n        localStorage.setItem('token', token);\r\n        dispatch(authSuccess(token));\r\n      })\r\n      .catch(err => {\r\n        dispatch(authFail(err));\r\n      })\r\n  }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n  return dispatch => {\r\n    const token = localStorage.getItem('token');\r\n    if (token === undefined) {\r\n      dispatch(logout());\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}