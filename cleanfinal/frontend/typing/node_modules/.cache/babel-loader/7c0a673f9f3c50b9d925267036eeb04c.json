{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ody\\\\Desktop\\\\prog\\\\cs50web\\\\finalapp\\\\cleanfinal\\\\frontend\\\\typing\\\\src\\\\containers\\\\TypingGame.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport Score from '../components/GameComplete';\n\nclass TypingGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateResponse = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.nextWord = event => {\n      if (event.code === 'Space') {\n        const word = this.state.input;\n\n        if (word.replace(\" \", \"\") === this.state.displayText[this.state.wordCounter]) {\n          this.setState({\n            score: this.state.score + 1,\n            input: \"\",\n            wordCounter: this.state.wordCounter + 1\n          });\n        } else {\n          this.setState({\n            input: \"\"\n          });\n        } //check if we are done with the current text\n\n\n        if (this.state.wordCounter + 1 === this.state.displayText.length) {\n          //check if we are done with the whole text\n          if (this.state.textCounter + 1 === this.state.fullText.length) {\n            console.log(\"YOU WON!\");\n            this.setState(state => ({\n              complete: !state.complete\n            }));\n          } else {\n            this.setState(state => ({\n              displayText: state.fullText[state.textCounter + 1].split(\" \"),\n              textCounter: state.textCounter + 1,\n              wordCounter: 0\n            }));\n          }\n        }\n      }\n    };\n\n    this.state = {\n      fullText: [],\n      displayText: [],\n      score: 0,\n      wordCounter: 0,\n      textCounter: 0,\n      input: \"\",\n      complete: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary').then(res => {\n      const data = res.data.extract; // Sanitizing text by removing accents/diacritics\n\n      const noSpacesText = data.replace(/\\s\\s+/g, ' ');\n      let splitData = noSpacesText.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"); // Split text by sentence\n\n      splitData = splitData.split(\". \");\n      console.log(splitData);\n      this.setState(() => ({\n        //One state variable for the full text and one for the first sentence\n        fullText: splitData,\n        displayText: splitData[0].split(\" \")\n      }));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-test\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"text-area\",\n        children: this.state.displayText.map(text => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"test-displayText\",\n          children: [text, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        onKeyPress: this.nextWord,\n        onChange: this.updateResponse,\n        value: this.state.input,\n        className: \"form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Input: \", this.state.input]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", this.state.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Counter: \", this.state.wordCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Current word: \", this.state.displayText[this.state.wordCounter]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), this.props.complete ?\n      /*#__PURE__*/\n      // <Score data={this.state.results} />\n      _jsxDEV(\"div\", {\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Not done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TypingGame;","map":{"version":3,"sources":["C:/Users/Ody/Desktop/prog/cs50web/finalapp/cleanfinal/frontend/typing/src/containers/TypingGame.js"],"names":["React","axios","Form","Score","TypingGame","Component","constructor","props","updateResponse","event","setState","input","target","value","nextWord","code","word","state","replace","displayText","wordCounter","score","length","textCounter","fullText","console","log","complete","split","componentDidMount","get","then","res","data","extract","noSpacesText","splitData","normalize","render","map","text"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Score from '../components/GameComplete';\r\n\r\nclass TypingGame extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fullText: [],\r\n      displayText: [],\r\n      score: 0,\r\n      wordCounter: 0,\r\n      textCounter: 0,\r\n      input: \"\",\r\n      complete: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary')\r\n    .then(res => {\r\n      const data = res.data.extract;\r\n      // Sanitizing text by removing accents/diacritics\r\n      const noSpacesText = data.replace(/\\s\\s+/g, ' ');\r\n      let splitData = noSpacesText.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n      // Split text by sentence\r\n      splitData = splitData.split(\". \");\r\n      console.log(splitData);\r\n      this.setState(() => ({\r\n        //One state variable for the full text and one for the first sentence\r\n        fullText: splitData,\r\n        displayText: splitData[0].split(\" \")\r\n      }));\r\n    })\r\n  }\r\n  \r\n  updateResponse = (event) => {\r\n    this.setState({\r\n      input: event.target.value\r\n    })\r\n  }\r\n\r\n  nextWord = (event) => {\r\n    if (event.code === 'Space') {\r\n      const word = this.state.input;\r\n      \r\n      if (word.replace(\" \", \"\") === this.state.displayText[this.state.wordCounter]) {\r\n        this.setState({\r\n          score: this.state.score + 1,\r\n          input: \"\",\r\n          wordCounter: this.state.wordCounter + 1\r\n        });\r\n      } else {\r\n        this.setState({\r\n          input: \"\"\r\n        });\r\n      }\r\n      //check if we are done with the current text\r\n      if (this.state.wordCounter + 1 === this.state.displayText.length) {\r\n        //check if we are done with the whole text\r\n        if (this.state.textCounter + 1 === this.state.fullText.length) {\r\n          console.log(\"YOU WON!\");\r\n          this.setState(state => ({\r\n            complete: !state.complete\r\n          }));\r\n        } else {\r\n          this.setState(state => ({\r\n            displayText: state.fullText[state.textCounter + 1].split(\" \"),\r\n            textCounter: state.textCounter + 1,\r\n            wordCounter: 0\r\n          }));\r\n        } \r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"typing-test\">\r\n        <div id=\"text-area\">\r\n          {this.state.displayText.map((text) =>\r\n            <span className=\"test-displayText\">{text} </span>\r\n          )}\r\n        </div>\r\n        <div className=\"gap-20\"></div>\r\n        <Form.Control onKeyPress={this.nextWord} onChange={this.updateResponse} value={this.state.input} className=\"form\"/>\r\n        <div className=\"gap-20\"></div>\r\n        \r\n        {/* Debugging info */}\r\n        <div>Input: {this.state.input}</div>\r\n        <div>Score: {this.state.score}</div>\r\n        <div>Counter: {this.state.wordCounter}</div>\r\n        <div>Current word: {this.state.displayText[this.state.wordCounter]}</div>\r\n        \r\n        {\r\n          this.props.complete ?\r\n            // <Score data={this.state.results} />\r\n            <div>Done</div>\r\n          :\r\n          <div>Not done</div>  \r\n        }\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TypingGame;"]},"metadata":{},"sourceType":"module"}