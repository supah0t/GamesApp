{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ody\\\\Desktop\\\\prog\\\\cs50web\\\\finalapp\\\\cleanfinal\\\\frontend\\\\typing\\\\src\\\\containers\\\\TypingGame.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport Score from '../components/GameComplete';\nimport CountUp from 'react-countup';\n\nfunction ShowScore(props) {\n  if (!props.won.complete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Done\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ShowScore;\n\nclass TypingGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.TimeLog = number => {\n      console.log(this.state.startTime);\n    };\n\n    this.StartTimer = () => {\n      if (this.state.startTime === 0) {\n        this.setState({\n          startTime: new Date().getTime()\n        }, this.TimeLog(5));\n      }\n    };\n\n    this.FinishTimer = () => {\n      this.setState(state => ({\n        endTime: new Date().getTime() - state.startTime\n      }));\n    };\n\n    this.updateResponse = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.nextWord = event => {\n      this.StartTimer();\n\n      if (event.code === 'Space') {\n        const word = this.state.input;\n\n        if (word.replace(\" \", \"\") === this.state.displayText[this.state.wordCounter]) {\n          this.setState({\n            score: this.state.score + 1,\n            input: \"\",\n            wordCounter: this.state.wordCounter + 1\n          });\n        } else {\n          this.setState({\n            input: \"\"\n          });\n        } //check if we are done with the current text\n\n\n        if (this.state.wordCounter + 1 === this.state.displayText.length) {\n          //check if we are done with the whole text\n          if (this.state.textCounter + 1 === this.state.fullText.length) {\n            console.log(\"YOU WON!\");\n            this.setState(state => ({\n              complete: !state.complete\n            }));\n          } else {\n            this.setState(state => ({\n              displayText: state.fullText[state.textCounter + 1].split(\" \"),\n              textCounter: state.textCounter + 1,\n              wordCounter: 0\n            }));\n          }\n        }\n      }\n    };\n\n    this.state = {\n      fullText: [],\n      displayText: [],\n      score: 0,\n      wordCounter: 0,\n      textCounter: 0,\n      input: \"\",\n      complete: false,\n      startTime: 0,\n      endTime: 0\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary').then(res => {\n      const data = res.data.extract; // Sanitizing text by removing accents/diacritics\n\n      const noSpacesText = data.replace(/\\s\\s+/g, ' ');\n      let splitData = noSpacesText.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"); // Split text by sentence\n\n      splitData = splitData.split(\". \");\n      console.log(splitData);\n      this.setState(() => ({\n        //One state variable for the full text and one for the first sentence\n        fullText: splitData,\n        displayText: splitData[0].split(\" \")\n      }));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-test\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"text-area\",\n        children: this.state.displayText.map(text => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"test-displayText\",\n          children: [text, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        onKeyPress: this.nextWord,\n        onChange: this.updateResponse,\n        value: this.state.input,\n        className: \"form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Input: \", this.state.input]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", this.state.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Counter: \", this.state.wordCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Current word: \", this.state.displayText[this.state.wordCounter]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ShowScore, {\n        won: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.StartTimer,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.FinishTimer,\n        children: \"Show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TypingGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowScore\");","map":{"version":3,"sources":["C:/Users/Ody/Desktop/prog/cs50web/finalapp/cleanfinal/frontend/typing/src/containers/TypingGame.js"],"names":["React","axios","Form","Score","CountUp","ShowScore","props","won","complete","TypingGame","Component","constructor","TimeLog","number","console","log","state","startTime","StartTimer","setState","Date","getTime","FinishTimer","endTime","updateResponse","event","input","target","value","nextWord","code","word","replace","displayText","wordCounter","score","length","textCounter","fullText","split","componentDidMount","get","then","res","data","extract","noSpacesText","splitData","normalize","render","map","text"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Score from '../components/GameComplete';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nfunction ShowScore(props) {\r\n  if (!props.won.complete) {\r\n    return (\r\n      <div>Not done</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>Done</div>\r\n  );\r\n}\r\n\r\n\r\nclass TypingGame extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fullText: [],\r\n      displayText: [],\r\n      score: 0,\r\n      wordCounter: 0,\r\n      textCounter: 0,\r\n      input: \"\",\r\n      complete: false,\r\n      startTime: 0,\r\n      endTime: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary')\r\n    .then(res => {\r\n      const data = res.data.extract;\r\n      // Sanitizing text by removing accents/diacritics\r\n      const noSpacesText = data.replace(/\\s\\s+/g, ' ');\r\n      let splitData = noSpacesText.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n      // Split text by sentence\r\n      splitData = splitData.split(\". \");\r\n      console.log(splitData);\r\n      this.setState(() => ({\r\n        //One state variable for the full text and one for the first sentence\r\n        fullText: splitData,\r\n        displayText: splitData[0].split(\" \")\r\n      }));\r\n    })\r\n  }\r\n  \r\n  TimeLog = (number) => {\r\n    console.log(this.state.startTime);\r\n  }\r\n\r\n  StartTimer = () => {\r\n    if (this.state.startTime === 0) {\r\n      this.setState({\r\n        startTime: new Date().getTime()\r\n        }, this.TimeLog(5) );  \r\n    }\r\n  }\r\n  \r\n  FinishTimer = () => {\r\n    this.setState((state) => ({\r\n      endTime: ((new Date().getTime()) - state.startTime)\r\n    }));\r\n  }\r\n\r\n  updateResponse = (event) => {\r\n    this.setState({\r\n      input: event.target.value\r\n    })\r\n  }\r\n\r\n  nextWord = (event) => {\r\n    this.StartTimer();\r\n    if (event.code === 'Space') {\r\n      const word = this.state.input;\r\n      \r\n      if (word.replace(\" \", \"\") === this.state.displayText[this.state.wordCounter]) {\r\n        this.setState({\r\n          score: this.state.score + 1,\r\n          input: \"\",\r\n          wordCounter: this.state.wordCounter + 1\r\n        });\r\n      } else {\r\n        this.setState({\r\n          input: \"\"\r\n        });\r\n      }\r\n      //check if we are done with the current text\r\n      if (this.state.wordCounter + 1 === this.state.displayText.length) {\r\n        //check if we are done with the whole text\r\n        if (this.state.textCounter + 1 === this.state.fullText.length) {\r\n          console.log(\"YOU WON!\");\r\n          this.setState(state => ({\r\n            complete: !state.complete\r\n          }));\r\n        } else {\r\n          this.setState(state => ({\r\n            displayText: state.fullText[state.textCounter + 1].split(\" \"),\r\n            textCounter: state.textCounter + 1,\r\n            wordCounter: 0\r\n          }));\r\n        } \r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"typing-test\">\r\n        <div id=\"text-area\">\r\n          {this.state.displayText.map((text) =>\r\n            <span className=\"test-displayText\">{text} </span>\r\n          )}\r\n        </div>\r\n        <div className=\"gap-20\"></div>\r\n        <Form.Control onKeyPress={this.nextWord} onChange={this.updateResponse} value={this.state.input} className=\"form\"/>\r\n        <div className=\"gap-20\"></div>\r\n        \r\n        {/* Debugging info */}\r\n        <div>Input: {this.state.input}</div>\r\n        <div>Score: {this.state.score}</div>\r\n        <div>Counter: {this.state.wordCounter}</div>\r\n        <div>Current word: {this.state.displayText[this.state.wordCounter]}</div>\r\n        \r\n        <ShowScore won={this.state} />\r\n        \r\n        {/* <CountUp \r\n          duration={20}\r\n          end={20}\r\n          useEasing={false}\r\n          decimals={2}\r\n        >\r\n          {({ countUpRef, start }) => (\r\n            <div>\r\n              <span ref={countUpRef} />\r\n              <button onClick={start}>Start</button>\r\n            </div>\r\n          )}\r\n        </CountUp> */}\r\n        \r\n        <button onClick={this.StartTimer}>Start</button>\r\n        <button onClick={this.FinishTimer}>Show</button>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TypingGame;"]},"metadata":{},"sourceType":"module"}