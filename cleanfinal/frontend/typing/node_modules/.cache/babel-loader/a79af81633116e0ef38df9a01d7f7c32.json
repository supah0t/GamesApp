{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ody\\\\Desktop\\\\prog\\\\cs50web\\\\finalapp\\\\cleanfinal\\\\frontend\\\\typing\\\\src\\\\containers\\\\TypingGame.js\";\n//Handles all the typing game logic\nimport React from 'react';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport VirtualKeyboard from '../components/VirtualKeyboard';\n\nfunction ShowScore(props) {\n  if (!props.won.complete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Done\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ShowScore;\n\nclass TypingGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.FetchData = () => {\n      axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary').then(res => {\n        const data = res.data.extract; // Sanitizing text by removing accents/diacritics\n\n        const noSpacesData = data.replace(/\\s\\s+/g, ' ');\n        const cleanData = noSpacesData.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"); //Get total number of letters for Words per minute calculation at the end\n\n        const wordCount = cleanData.length; //Recursively fetch data until conditions are met\n        //Tested it many times, nothing breaking has happened\n\n        if (wordCount < 300 || wordCount > 500) {\n          return this.FetchData();\n        } // Split text by sentence\n\n\n        let splitData = cleanData.split(\". \"); //Request data debugging\n\n        console.log(wordCount);\n        console.log(splitData);\n        this.setState(() => ({\n          //One state variable for the full text and one for the first sentence\n          fullText: splitData,\n          displayText: splitData[0].split(\" \"),\n          wordCount: wordCount,\n          loading: false\n        }));\n      });\n    };\n\n    this.TimeLog = () => {\n      console.log(this.state.endTime);\n    };\n\n    this.StartTimer = () => {\n      if (this.state.startTime === 0) {\n        this.setState({\n          startTime: new Date().getTime()\n        }, this.TimeLog());\n      }\n    };\n\n    this.FinishTimer = () => {\n      this.setState(state => ({\n        endTime: new Date().getTime() - state.startTime\n      }), console.log(this.state.endTime));\n    };\n\n    this.updateResponse = event => {\n      if (event.code === 'Space') {\n        this.setState(state => ({\n          input: event.target.value\n        }));\n      }\n    };\n\n    this.nextWord = event => {\n      //Starts the timer to calculate the score in the end\n      this.StartTimer();\n\n      if (event.code !== 'Space') {\n        this.updateResponse(event);\n      }\n\n      if (event.code === 'Space') {\n        const word = this.state.input.replace(/\\s/g, \"\");\n\n        if (word === this.state.displayText[this.state.wordCounter]) {\n          this.setState({\n            score: this.state.score + 1,\n            input: \"\",\n            wordCounter: this.state.wordCounter + 1\n          });\n        } else {} //check if we are done with the current text\n\n\n        if (this.state.wordCounter + 1 === this.state.displayText.length) {\n          //check if we are done with the whole text\n          if (this.state.textCounter + 1 === this.state.fullText.length) {\n            console.log(\"YOU WON!\");\n            this.setState(state => ({\n              complete: !state.complete\n            }), this.FinishTimer());\n          } else {\n            this.setState(state => ({\n              displayText: state.fullText[state.textCounter + 1].split(\" \"),\n              textCounter: state.textCounter + 1,\n              wordCounter: 0\n            }));\n          }\n        }\n      }\n    };\n\n    this.state = {\n      fullText: [],\n      displayText: [],\n      wordCount: 0,\n      score: 0,\n      wordCounter: 0,\n      textCounter: 0,\n      input: \"\",\n      complete: false,\n      startTime: 0,\n      endTime: 0,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.FetchData();\n  } //Function for fetching data from wikipedia, evaluating, and cleaning it\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-test\",\n      children: [this.state.loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"light\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"text-area\",\n        children: this.state.displayText.map(text => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"test-displayText\",\n          children: [text, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        disabled: this.state.complete ? \"disabled\" : \"\",\n        onKeyPress: this.nextWord // onChange={this.updateResponse}\n        ,\n        value: this.state.input,\n        id: \"game-form\",\n        className: \"form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gap-20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Input: \", this.state.input]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", this.state.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Counter: \", this.state.wordCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Current word: \", this.state.displayText[this.state.wordCounter]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ShowScore, {\n        won: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.TimeLog,\n        children: \"Show Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TypingGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowScore\");","map":{"version":3,"sources":["C:/Users/Ody/Desktop/prog/cs50web/finalapp/cleanfinal/frontend/typing/src/containers/TypingGame.js"],"names":["React","axios","Form","Spinner","VirtualKeyboard","ShowScore","props","won","complete","TypingGame","Component","constructor","FetchData","get","then","res","data","extract","noSpacesData","replace","cleanData","normalize","wordCount","length","splitData","split","console","log","setState","fullText","displayText","loading","TimeLog","state","endTime","StartTimer","startTime","Date","getTime","FinishTimer","updateResponse","event","code","input","target","value","nextWord","word","wordCounter","score","textCounter","componentDidMount","render","map","text"],"mappings":"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","sourcesContent":["//Handles all the typing game logic\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport VirtualKeyboard from '../components/VirtualKeyboard';\r\n\r\nfunction ShowScore(props) {\r\n  if (!props.won.complete) {\r\n    return (\r\n      <div>Not done</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>Done</div>\r\n  );\r\n}\r\n\r\n\r\nclass TypingGame extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fullText: [],\r\n      displayText: [],\r\n      wordCount: 0,\r\n      score: 0,\r\n      wordCounter: 0,\r\n      textCounter: 0,\r\n      input: \"\",\r\n      complete: false,\r\n      startTime: 0,\r\n      endTime: 0,\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    this.FetchData();\r\n  }\r\n  \r\n  //Function for fetching data from wikipedia, evaluating, and cleaning it\r\n  FetchData = () => {\r\n    axios.get('https://en.wikipedia.org/api/rest_v1/page/random/summary')\r\n    .then(res => {\r\n      const data = res.data.extract;\r\n\r\n      // Sanitizing text by removing accents/diacritics\r\n      const noSpacesData = data.replace(/\\s\\s+/g, ' ');\r\n      const cleanData = noSpacesData.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n\r\n      //Get total number of letters for Words per minute calculation at the end\r\n      const wordCount = cleanData.length;\r\n      \r\n      //Recursively fetch data until conditions are met\r\n      //Tested it many times, nothing breaking has happened\r\n      if (wordCount < 300 || wordCount > 500) {\r\n        return this.FetchData();\r\n      }\r\n\r\n      // Split text by sentence\r\n      let splitData = cleanData.split(\". \");\r\n\r\n      //Request data debugging\r\n      console.log(wordCount);\r\n      console.log(splitData);\r\n\r\n      this.setState(() => ({\r\n        //One state variable for the full text and one for the first sentence\r\n        fullText: splitData,\r\n        displayText: splitData[0].split(\" \"),\r\n        wordCount: wordCount,\r\n        loading: false\r\n      }));\r\n    })\r\n  }\r\n  \r\n  TimeLog = () => {\r\n    console.log(this.state.endTime);\r\n  }\r\n\r\n  StartTimer = () => {\r\n    if (this.state.startTime === 0) {\r\n      this.setState({\r\n        startTime: new Date().getTime()\r\n        }, this.TimeLog() );  \r\n    }\r\n  }\r\n  \r\n  FinishTimer = () => {\r\n    this.setState(state => ({\r\n      endTime: ((new Date().getTime()) - state.startTime)\r\n    }), console.log(this.state.endTime) );\r\n  }\r\n\r\n  updateResponse = (event) => {\r\n    if (event.code === 'Space') {\r\n      this.setState(state => ({\r\n        input: event.target.value\r\n      }));\r\n    }\r\n  }\r\n\r\n  nextWord = (event) => {\r\n    //Starts the timer to calculate the score in the end\r\n    this.StartTimer();\r\n    \r\n    \r\n    if (event.code !== 'Space') { this.updateResponse(event); }\r\n    if (event.code === 'Space') {\r\n      const word = this.state.input.replace(/\\s/g, \"\");\r\n      \r\n      if (word === this.state.displayText[this.state.wordCounter]) {\r\n        this.setState({\r\n          score: this.state.score + 1,\r\n          input: \"\",\r\n          wordCounter: this.state.wordCounter + 1\r\n        });\r\n      } else {\r\n        \r\n      }\r\n      //check if we are done with the current text\r\n      if (this.state.wordCounter + 1 === this.state.displayText.length) {\r\n        //check if we are done with the whole text\r\n        if (this.state.textCounter + 1 === this.state.fullText.length) {\r\n          console.log(\"YOU WON!\");\r\n          this.setState(state => ({\r\n            complete: !state.complete,\r\n          }), this.FinishTimer());\r\n        } else {\r\n          this.setState(state => ({\r\n            displayText: state.fullText[state.textCounter + 1].split(\" \"),\r\n            textCounter: state.textCounter + 1,\r\n            wordCounter: 0\r\n          }));\r\n        } \r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"typing-test\">\r\n        \r\n        {\r\n          this.state.loading\r\n          \r\n            ? <Spinner animation=\"border\" variant=\"light\" />\r\n          \r\n          : <div id=\"text-area\">\r\n              {this.state.displayText.map((text) =>\r\n                <span className=\"test-displayText\">{text} </span>\r\n              )}\r\n            </div>\r\n        }\r\n        \r\n        <div className=\"gap-20\"></div>\r\n        <Form.Control disabled={(this.state.complete) ? \"disabled\" : \"\"} onKeyPress={this.nextWord} \r\n        // onChange={this.updateResponse}\r\n        value={this.state.input} id=\"game-form\" className=\"form\"/>\r\n        <div className=\"gap-20\"></div>\r\n        \r\n        {/* Debugging info */}\r\n        <div>Input: {this.state.input}</div>\r\n        <div>Score: {this.state.score}</div>\r\n        <div>Counter: {this.state.wordCounter}</div>\r\n        <div>Current word: {this.state.displayText[this.state.wordCounter]}</div>\r\n        \r\n        <ShowScore won={this.state} />\r\n        \r\n        <button onClick={this.TimeLog}>Show Result</button>\r\n        \r\n        {/* <VirtualKeyboard /> */}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TypingGame;"]},"metadata":{},"sourceType":"module"}